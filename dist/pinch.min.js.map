{"version":3,"file":"pinch.min.js","sources":["../lib/shared.js","../lib/pinch.js"],"sourcesContent":["export function dispatchCustomEvent(name, elm, detail, cancelable = true) {\r\n    return !elm.dispatchEvent(\r\n        new CustomEvent(`ezg${name}`, { detail, cancelable })\r\n    );\r\n}\r\n","import { dispatchCustomEvent } from \"./shared\";\n\nlet startTouches;\nlet lastTouches;\n\nlet activeElement;\nlet checkPinch;\n\nlet lastDist;\nlet lastOffset;\nlet lastAngle;\n\nconst defaults = {\n    distanceThreshold: 0,\n    angleThreshold: 0,\n};\n\nconst options = new WeakMap();\n\nexport function enablePinchEvents(elm, opt = defaults) {\n    options.set(elm, opt);\n    elm.addEventListener(\"touchstart\", onTouchStart);\n}\n\nfunction onTouchStart(e) {\n    startTouches = e.touches;\n    checkPinch = true;\n    e.currentTarget.addEventListener(\"touchmove\", onTouchMove);\n}\n\nfunction onTouchMove(e) {\n    e.preventDefault();\n    if (e.touches.length != 2) return;\n\n    const props = calculatePinchProps(e.touches);\n\n    if (checkPinch) {\n        pinchStartHandler(e, props);\n    } else {\n        pinchMoveHandler(e, props);\n    }\n}\n\nfunction pinchStartHandler(e, { dist, angle }) {\n    if (startTouches.length != 2) return;\n    const { dist: startDist, angle: startAngle } = calculatePinchProps(\n        startTouches\n    );\n\n    const { distanceThreshold, angleThreshold } = options.get(e.currentTarget);\n\n    const dd = Math.abs(dist - startDist);\n    const da = Math.abs(angle - startAngle);\n\n    if (dd >= distanceThreshold && da >= angleThreshold) {\n        const isCancelled = dispatchCustomEvent(\"pinchstart\", e.currentTarget, {\n            startTouches,\n            originalEvent: e,\n        });\n\n        if (isCancelled) {\n            return elm.removeEventListener(\"touchmove\", onTouchMove);\n        }\n\n        activeElement = e.currentTarget;\n        lastDist = startDist;\n        lastAngle = startAngle;\n        lastOffset = 0;\n        checkPinch = false;\n        document.addEventListener(\"touchend\", onTouchEnd);\n    }\n}\n\nfunction pinchMoveHandler(e, props) {\n    const { angle, offset, dist } = props;\n    const isCancelled = dispatchPinchEvent(\"move\", e.currentTarget, {\n        ...props,\n        originalEvent: e,\n        touches: e.touches,\n    });\n\n    // will stop counting lastDist/Offset when cancelled\n    if (isCancelled) return;\n\n    lastDist = dist;\n    lastAngle = angle;\n    lastOffset = offset;\n}\n\nfunction calculatePinchProps(touches) {\n    const [p1, p2] = touches;\n\n    const dx = p1.clientX - p2.clientX;\n    const dy = p1.clientY - p2.clientY;\n\n    const dist = Math.hypot(dx, dy);\n    const offset = dist - lastDist;\n\n    const angle = Math.atan2(dy, dx);\n    const da = angle - lastAngle;\n\n    const midX = (p1.clientX + p2.clientX) / 2;\n    const midY = (p1.clientY + p2.clientY) / 2;\n\n    const dir = Math.sign(dist - (lastDist || dist));\n\n    return { dx, dy, da, dist, angle, offset, midX, midY, dir };\n}\n\nfunction onTouchEnd(e) {\n    if (!checkPinch && activeElement) {\n        dispatchPinchEvent(\"end\", activeElement, null, false);\n        activeElement = undefined;\n    }\n}\n\nfunction dispatchPinchEvent(ev, elm, detail, cancelable) {\n    detail = {\n        ...detail,\n        startTouches,\n        lastTouches,\n        lastOffset,\n        lastDist,\n        lastAngle,\n    };\n    return dispatchCustomEvent(`pinch${ev}`, elm, detail, cancelable);\n}\n"],"names":["dispatchCustomEvent","name","elm","detail","cancelable","dispatchEvent","CustomEvent","startTouches","activeElement","checkPinch","lastDist","lastOffset","lastAngle","defaults","distanceThreshold","angleThreshold","options","WeakMap","onTouchStart","e","touches","currentTarget","addEventListener","onTouchMove","preventDefault","length","props","calculatePinchProps","dist","angle","startDist","startAngle","get","dd","Math","abs","da","originalEvent","removeEventListener","document","onTouchEnd","pinchStartHandler","offset","dispatchPinchEvent","pinchMoveHandler","p1","p2","dx","clientX","dy","clientY","hypot","atan2","midX","midY","dir","sign","undefined","ev","lastTouches","opt","set"],"mappings":"kPAAO,SAASA,EAAoBC,EAAMC,EAAKC,EAAQC,GAAa,GAChE,OAAQF,EAAIG,cACR,IAAIC,YAAY,MAAML,IAAQ,CAAEE,OAAAA,EAAQC,WAAAA,KCAhD,IAAIG,EAGAC,EACAC,EAEAC,EACAC,EACAC,EAEJ,MAAMC,EAAW,CACbC,kBAAmB,EACnBC,eAAgB,GAGdC,EAAU,IAAIC,QAOpB,SAASC,EAAaC,GAClBZ,EAAeY,EAAEC,QACjBX,GAAa,EACbU,EAAEE,cAAcC,iBAAiB,YAAaC,GAGlD,SAASA,EAAYJ,GAEjB,GADAA,EAAEK,iBACsB,GAApBL,EAAEC,QAAQK,OAAa,OAE3B,MAAMC,EAAQC,EAAoBR,EAAEC,SAEhCX,EAOR,SAA2BU,GAAGS,KAAEA,EAAIC,MAAEA,IAClC,GAA2B,GAAvBtB,EAAakB,OAAa,OAC9B,MAAQG,KAAME,EAAWD,MAAOE,GAAeJ,EAC3CpB,IAGEO,kBAAEA,EAAiBC,eAAEA,GAAmBC,EAAQgB,IAAIb,EAAEE,eAEtDY,EAAKC,KAAKC,IAAIP,EAAOE,GACrBM,EAAKF,KAAKC,IAAIN,EAAQE,GAE5B,GAAIE,GAAMnB,GAAqBsB,GAAMrB,EAAgB,CAMjD,GALoBf,EAAoB,aAAcmB,EAAEE,cAAe,CACnEd,aAAAA,EACA8B,cAAelB,IAIf,OAAOjB,IAAIoC,oBAAoB,YAAaf,GAGhDf,EAAgBW,EAAEE,cAClBX,EAAWoB,EACXlB,EAAYmB,EACZpB,EAAa,EACbF,GAAa,EACb8B,SAASjB,iBAAiB,WAAYkB,IAhCtCC,CAAkBtB,EAAGO,GAoC7B,SAA0BP,EAAGO,GACzB,MAAMG,MAAEA,EAAKa,OAAEA,EAAMd,KAAEA,GAASF,EAQhC,GAPoBiB,EAAmB,OAAQxB,EAAEE,cAAe,IACzDK,EACHW,cAAelB,EACfC,QAASD,EAAEC,UAIE,OAEjBV,EAAWkB,EACXhB,EAAYiB,EACZlB,EAAa+B,EA/CTE,CAAiBzB,EAAGO,GAkD5B,SAASC,EAAoBP,GACzB,MAAOyB,EAAIC,GAAM1B,EAEX2B,EAAKF,EAAGG,QAAUF,EAAGE,QACrBC,EAAKJ,EAAGK,QAAUJ,EAAGI,QAErBtB,EAAOM,KAAKiB,MAAMJ,EAAIE,GACtBP,EAASd,EAAOlB,EAEhBmB,EAAQK,KAAKkB,MAAMH,EAAIF,GAQ7B,MAAO,CAAEA,GAAAA,EAAIE,GAAAA,EAAIb,GAPNP,EAAQjB,EAOEgB,KAAAA,EAAMC,MAAAA,EAAOa,OAAAA,EAAQW,MAL5BR,EAAGG,QAAUF,EAAGE,SAAW,EAKOM,MAJlCT,EAAGK,QAAUJ,EAAGI,SAAW,EAIaK,IAF1CrB,KAAKsB,KAAK5B,GAAQlB,GAAYkB,KAK9C,SAASY,EAAWrB,IACXV,GAAcD,IACfmC,EAAmB,MAAOnC,EAAe,MAAM,GAC/CA,OAAgBiD,GAIxB,SAASd,EAAmBe,EAAIxD,EAAKC,EAAQC,GASzC,OAAOJ,EAAoB,QAAQ0D,IAAMxD,EARzCC,EAAS,IACFA,EACHI,aAAAA,EACAoD,YArHJA,UAsHIhD,WAAAA,EACAD,SAAAA,EACAE,UAAAA,GAEkDR,uBA1GnD,SAA2BF,EAAK0D,EAAM/C,GACzCG,EAAQ6C,IAAI3D,EAAK0D,GACjB1D,EAAIoB,iBAAiB,aAAcJ"}